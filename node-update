  Node Js - Server Side
        
                Commands

        1. create a package.json file : npm init
        2. Install express js : npm i express
        3. Install cors : npm i cors
        4. Run the server app : node index.js / nodemon index.js
        5. Install mongoose : npm i mongoose
        6. Install json web token : npm i jsonwebtoken

        Steps to create a nodejs server using express

        1. create server folder
        2. create a package.json file
        3. Install express js 
        4. create entry point of our app: by creating index.js file
        5. Import express in index.js file
        6. create server app using express in index.js
        7. Enable cross origin resource shairing in server app using cors protocol
            - Install cors (Cross Origin Resource Shairing) in project folder
            - Import cors in index.js file
            - Using cors specify the origin of front end app to server app that should share data
        8. Use json parser in server app - express.json()
        9. Set up port number for server app so that it will be available in network
        10. Run the server app : run your index.js file
        11. To resolve http request : server-app.http-request(path,call back function)
            - GET : to read / get data from server
        12. Middleware - Its special type of function with 3 arguments (req,res,next)
            - Application specific Middleware 
            - Router Specific Middleware

                        Bank Server API Resolving
        1. How to resolve register request from front end (register : post http(url,body) ) to index.js
            - 



                        MONGODB : Store data permanently
        1. create a db for bank , db as bank
        2. create collections to store data, collection as users
            - collection name conventions: 
                - 1. all characters should be in small letters
                - 2. it should be a plural word (ex: users,persons,products...)
        3. data should be stored for each user of bank app
            - username : string
            - password : string
            - account number : number
            - balance : number
            - transactions : array
        4. To communicate with MONGODB and NODE js - nodejs uses mongoose library
            - 1. Install mongoose
            - 2. create folder, services
            - 3. create db.js to define connection with MONGODB and node using mongoose
            - 4. Import mongoose in db.js 
            - 5. Define connection string using mongoose to connect with MONGODB and node
            - 6. create collection / model using mongoose to store documents /data
                - model name conventions : 
                    - first character should be in capital letter
                    - it should a singular word
            - 7. export the model
            

                     Token Based Authentication - Json Web Token
                   --------------------------------------------------
            1. Install json web token
            2. Import jsonwebtoken in logic.js
            3. Generate token - sign() when login successful
            4. Create router specific Middleware to verify token before processing balance request
            5. verify token - verify() to verify token generated by jsonwebtoken



              Server with node and express (Deployable Server)
         1.create a server folder
         2.inside server folder generate package.json file: npm init -y
         3. Install following packages : express,dotenv,cors,mongoose
         4. create index.js (entry file) file in the server folder
         5. create .env file to store all environmental variables in the server folder
         6. create .gitignore file in server folder
         7. Import dotenv,express,cors in index.js
         8. create server application using express
         9. use cors and express json to server app
         10. create port to listen your server app
         11. Run server app in the specified port
         12. Create routes folder to hold all api request in server folder,create router.js file to resolve api request from client
          -using express.Router object, we define routes for all api
           - inside each routes  we have to give logic to resolve api
         13. To define logic to resolving api, create controller folder, 





                    Database Setup - MongoDB Atlas
             ------------------------------------------
             
     1. To get connectionstring: Open Atlas, go to Database, click connect button, then choose connect with application, copy connection string
     mongodb+srv://rahulsnair1024:<password>@rahul.twkmp6r.mongodb.net/<database-name>?retryWrites=true&w=majority&appName=AtlasApp
     2. create db folder in server, where we use mongoose to connect mongodb with nodejs
     3. Import connection file into index.js
     4. to define  schema for data to be stored in db, create model folder in server app,inside create productschema file
     - import mongoose
     - using mongoose define schema
     - create model/collection using the above schema
     - export model


